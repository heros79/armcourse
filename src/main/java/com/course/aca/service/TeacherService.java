package com.course.aca.service;

import com.course.aca.dao.CourseDao;
import com.course.aca.dao.FileInfoDao;
import com.course.aca.dao.TeacherDao;
import com.course.aca.dao.UserDao;
import com.course.aca.exception.IllegalParameterException;
import com.course.aca.exception.UnauthorizedException;
import com.course.aca.model.dto.Course;
import com.course.aca.model.dto.ItemInfo;
import com.course.aca.model.dto.StudentCourseRequest;
import com.course.aca.model.entity.CourseEntity;
import com.course.aca.model.entity.FileEntity;
import com.course.aca.model.entity.PathComponentsEntity;
import com.course.aca.model.entity.StudentCourseRequestEntity;
import com.course.aca.service.system.DirectoryHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * This class provides methods associated with teachers.
 *
 * @author Anna
 * @author Norik
 * @author Narek
 */
@Service
public class TeacherService {

    /**
     * Bean of class {@link CourseDao }.
     *
     * Initialize using "Autowired" annotation in constructor.
     */
    private final CourseDao courseDao;

    /**
     * Bean of class {@link UserDao }.
     *
     * Initialize using "Autowired" annotation in constructor.
     */
    private final UserDao userDao;

    /**
     * Bean of class {@link TeacherDao }.
     *
     * Initialize using "Autowired" annotation in constructor.
     */
    private final TeacherDao teacherDao;

    /**
     * Bean of class {@link FileInfoDao }.
     *
     * Initialize using "Autowired" annotation in constructor.
     */
    private FileInfoDao fileInfoDao;

    /**
     * Initializes {@link CourseDao}'s bean using "Autowired" annotation.
     * Initializes {@link UserDao}'s bean using "Autowired" annotation.
     * Initializes {@link TeacherDao}'s bean using "Autowired" annotation.
     * Initializes {@link FileInfoDao}'s bean using "Autowired" annotation.
     *
     * @param courseDao Required by "Autowired" annotation.
     * @param userDao Required by "Autowired" annotation.
     * @param teacherDao Required by "Autowired" annotation.
     * @param fileInfoDao Required by "Autowired" annotation.
     */
    @Autowired
    public TeacherService(CourseDao courseDao, UserDao userDao, TeacherDao teacherDao, FileInfoDao fileInfoDao) {
        this.courseDao = courseDao;
        this.userDao = userDao;
        this.teacherDao = teacherDao;
        this.fileInfoDao = fileInfoDao;
    }

    /**
     * Gets List of courses belonging to teacher using Security token from DataBase  in "packs".
     * One "pack"'s capacity is 10.
     *
     * @param token Security token. Autogenerated after login or registration.
     * @param pageIndex Pack's index number. Starting from 1.
     * @param status Method returns only those courses, whos status is equal to this argument's value.
     *
     * @return {@link List<Course>} Required courses list.
     */
    public List<Course> getCoursesByTeacherId(String token, int pageIndex, int status) {
        int teacherId = userDao.getUserId(token);
        List<Course> courses;
        List<CourseEntity> courseEntities = courseDao.getCoursesByTeacher(teacherId, pageIndex, status);
        courses = CourseService.parseToCourseList(courseEntities);
        return courses;
    }

    /**
     * Creats new Course. Adds data about new course to DataBase using {@link UserDao}.
     *
     * @param authToken Security token. Autogenerated after login or registration.
     * @param subcategoryId Specifies to which subcategory new course must belong.
     * @param courseName New Course's name.
     *
     * @return Newly created course's id.
     */
    public int createCourse(String authToken, int subcategoryId, String courseName) {
        int teacherId = userDao.getUserId(authToken);
        return teacherDao.createCourse(subcategoryId, courseName, teacherId);
    }

    /**
     * Gets Student-Course purchase request list.
     *
     * @param token Security token. Autogenerated after login or registration.
     *
     * @return {@link List<StudentCourseRequest>} List of {@link StudentCourseRequest} DTO's.
     */
    public List<StudentCourseRequest> getStudentCourseRequestList(String token) {
        int teacherId = userDao.getUserId(token);
        List<StudentCourseRequestEntity> entities = teacherDao.getStudentCourseRequests(teacherId);
        List<StudentCourseRequest> list = new ArrayList<>(entities.size());
        if (entities.isEmpty())
            return null;
        for (StudentCourseRequestEntity req : entities) {
            StudentCourseRequest dto = new StudentCourseRequest();
            dto.setId(req.getId());
            dto.setCourseId(req.getCourseId());
            dto.setCourseName(req.getCourseName());
            dto.setStudentId(req.getStudentId());
            dto.setStudentName(req.getStudentFullName());

            list.add(dto);
        }
        return list;
    }

    /**
     * Approves Student-Course purchase request.
     *
     * @param id Student-Course purchase request id.
     */
    public void approveRequest(int id) {
        teacherDao.approveRequest(id);
    }

    /**
     * Checks if specified course belongs to teacher (identified by Security Token).
     *
     * @param courseId Course, that must be checked.
     * @param authToken Teacher's token, who must be checked.
     *
     * @return True, if course belongs to teacher or false otherwise.
     *
     * @throws IllegalParameterException Chained up from {@link UserDao#getUserId(String)}
     * @throws UnauthorizedException //todo why is this exception thrown here ??)
     */
    public boolean isCourseBelongTeacher(int courseId, String authToken) throws IllegalParameterException, UnauthorizedException {
        int teacherId = userDao.getUserId(authToken);
        int id = courseDao.getCourseTeacherId(courseId);
        return id == teacherId;
    }

    //todo Why is entity returned from service layer? It is even used in controllers layer.
    public PathComponentsEntity getPathComponents(int courseId) {
        return teacherDao.getPathComponents(courseId);
    }

    /**
     * Creates section with specified name in specified course.
     *
     * @param courseId Course Id where new section is going to be added.
     * @param sectionName Section's name, that is going to be created.
     *
     * @return Newly created section's id from DataBase.
     */
    public int createSection(int courseId, String sectionName) {

        return teacherDao.createSection(courseId, sectionName);
    }

    /**
     * Sets description to already crated course.
     *
     * @param description Descriptions body, that is going to be added.
     * @param courseId Course Id, which description will be added.
     */
    public void setDescription(String description, int courseId) {

        teacherDao.setDescription(description, courseId);
    }

    /**
     * Sets already crated course's price.
     *
     * @param courseId Course's id, which price will be set.
     * @param price New price that will be set.
     */
    public void setCoursePrice(int courseId, int price) {
        teacherDao.setCoursePrice(courseId, price);
    }

    /**
     *  Gets Course's id by its's section's id passed via sectionId argument.
     *
     * @param sectionId Section Id which course's id will be detected.
     *
     * @return Founded course's id.
     *
     * @throws IllegalParameterException Chained up from {@link TeacherDao#getCourseIdBySection(int)}
     */
    public int getCourseIdBySection(int sectionId) throws IllegalParameterException {
        return teacherDao.getCourseIdBySection(sectionId);
    }

    /**
     * Gets section name using it's id.
     *
     * @param sectionId Section's id, which name is looked for.
     *
     * @return {@link String} Required section name.
     */
    public String getSectionName(int sectionId) {
        return teacherDao.getSectionName(sectionId);
    }

    /**
     * Updated already added courses full duration.
     *
     * @param courseId Course's id, which duration will be updated.
     * @param duration New duration that will be added to course information.
     */
    public void updateCourseDuration(int courseId, long duration) {
        teacherDao.updateCourseDuration(courseId, duration);
    }

    /**
     * Adds Files information to DataBase using {@link FileInfoDao}.
     *
     * @param itemInfo {@link ItemInfo} DTO's instance which stores information about new file.
     */
    public void addFile(ItemInfo itemInfo) {
        FileEntity fileEntity = new FileEntity();
        fileEntity.setPublic(itemInfo.isPublic());
        fileEntity.setName(itemInfo.getName());
        fileEntity.setResourceType(itemInfo.getResourceType());
        fileEntity.setResourceName(itemInfo.getResourceName());
        fileEntity.setSectionId(itemInfo.getSectionId());
        fileInfoDao.addFile(fileEntity);
    }

    /**
     * Checks if Student-Course request is addressed to teacher, identified by Security Token.
     *
     * @param authToken Teacher's token, who must be checked.
     * @param requestId Student-Course request Id, which must be checked.
     *
     * @return True, if request belongs to specified teacher. Otherwise returns False.
     *
     * @throws IllegalParameterException Chained up from {@link TeacherDao#getTeacherIdFromRequest(int)}
     */
    public boolean requestIsAddressedToTeacher(String authToken, int requestId) throws IllegalParameterException {
        int teacherId = userDao.getUserId(authToken);
        int teacherIdByRequestId = teacherDao.getTeacherIdFromRequest(requestId);
        return teacherId == teacherIdByRequestId;
    }

    /**
     * Generates local file's direct and full path and returns it.

     *
     * @param itemId Wanted File's id.
     *
     * @return {@link String} Generated file's path.
     *
     * @throws IllegalParameterException Chained up from {@link CourseDao}
     */
    public String getFilePath(int itemId) throws IllegalParameterException {

        int courseId = courseDao.getCourseIdByItem(itemId);
        return DirectoryHandler.root + File.separator + courseDao.getFilePath(itemId, courseId);
    }

    /**
     * Checks if specified file belongs to teacher, identified by Security Token.
     *
     * @param itemId File's Id, which will be checked.
     * @param authToken Teacher's token, who must be checked.
     *
     * @return True, if file belongs to specified teacher. Otherwise returns False.
     *
     * @throws IllegalParameterException Chained up from {@link CourseDao#getCourseIdByItem(int)}
     */
    public boolean isItemBelongToTeacher(int itemId, String authToken) throws IllegalParameterException {
        int courseId = courseDao.getCourseIdByItem(itemId);
        int teacherId = courseDao.getCourseTeacherId(courseId);
        int id = userDao.getUserId(authToken);
        return id == teacherId;
    }
}

