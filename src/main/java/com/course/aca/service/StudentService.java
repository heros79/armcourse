package com.course.aca.service;

import com.course.aca.dao.CourseDao;
import com.course.aca.dao.FileInfoDao;
import com.course.aca.dao.StudentDao;
import com.course.aca.dao.UserDao;
import com.course.aca.enums.Status;
import com.course.aca.exception.CourseAccessDeniedException;
import com.course.aca.exception.DuplicateRowException;
import com.course.aca.exception.IllegalParameterException;
import com.course.aca.exception.UnpaidCourseException;
import com.course.aca.model.dto.*;
import com.course.aca.model.entity.*;
import com.course.aca.service.system.DirectoryHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.util.List;
import java.util.stream.Collectors;

/**
 * This class provides methods associated with students.
 *
 * @author Anna
 * @author Norik
 * @author Narek
 */
@Service
public class StudentService {

    /**
     * Bean of class {@link CourseDao }.
     *
     * Initialize using "Autowired" annotation in constructor.
     */
    private CourseDao courseDao;

    /**
     * Bean of class {@link StudentDao }.
     *
     * Initialize using "Autowired" annotation in constructor.
     */
    private StudentDao studentDao;

    /**
     * Bean of class {@link FileInfoDao }.
     *
     * Initialize using "Autowired" annotation in constructor.
     */
    private FileInfoDao fileInfoDao;

    /**
     * Bean of class {@link UserDao }.
     *
     * Initialize using "Autowired" annotation in constructor.
     */
    private UserDao userDao;

    /**
     * Initializes {@link CourseDao}'s bean using "Autowired" annotation.
     * Initializes {@link StudentDao}'s bean using "Autowired" annotation.
     * Initializes {@link FileInfoDao}'s bean using "Autowired" annotation.
     * Initializes {@link UserDao}'s bean using "Autowired" annotation.
     *
     * @param courseDao Required by "Autowired" annotation.
     * @param studentDao Required by "Autowired" annotation.
     * @param fileInfoDao Required by "Autowired" annotation.
     * @param userDao Required by "Autowired" annotation.
     */
    @Autowired
    public StudentService(CourseDao courseDao, StudentDao studentDao, FileInfoDao fileInfoDao, UserDao userDao) {

        this.courseDao = courseDao;
        this.studentDao = studentDao;
        this.fileInfoDao = fileInfoDao;
        this.userDao = userDao;
    }

    /**
     * Public method. Gets all unpaid courses for single user using his Security token.
     *
     * @param token Security token. Autogenerated after login or registration.
     *
     * @return {@link List<Course>} containing all unpaid courses' information. Returns null if there's no unpaid course
     * for current user.
     */
    public List<Course> getNotPaidCourses(String token) {
        int userId = userDao.getUserId(token);

        List<CourseEntity> entity = studentDao.getNotPaidCourses(userId);

        if (entity.isEmpty())
            return null;

        return CourseService.parseToCourseList(entity);
    }

    /**
     * Public method. Gets all purchased courses for single user using his Security token.
     *
     * @param token Security token. Autogenerated after login or registration.
     *
     * @return {@link List<Course>} containing all purchased courses' information. Returns null if there's no purchased
     * course for current user.
     */
    public List<Course> getBoughtCourses(String token) {
        int userId = userDao.getUserId(token);

        List<CourseEntity> entity = studentDao.getBoughtCourses(userId);

        if (entity.isEmpty())
            return null;

        return CourseService.parseToCourseList(entity);
    }

    /**
     * Public method. Adds review-comment to course from user(defined by security token).
     *
     * @param token Security token. Autogenerated after login or registration.
     * @param courseId Course ID which about user is going to add review.
     * @param review Comment that user is going to add.
     *
     * @throws IllegalParameterException Thrown when trying to add review to not approved course.
     * @throws UnpaidCourseException  Thrown when trying to add review to not purchased course.
     */
    public void addReview(String token, int courseId, String review)
            throws IllegalParameterException, UnpaidCourseException {
        int userId = userDao.getUserId(token);

        if (courseDao.getCourseStatus(courseId) != Status.APPROVED.getStatusId())
            throw new IllegalParameterException();

        if (!studentDao.isPaid(token, courseId))
            throw new UnpaidCourseException();

        studentDao.addReviewToCourse(userId, courseId, review);
    }

    /**
     * Public method. Adds rating to course from user(defined by security token).
     *
     * @param token Security token. Autogenerated after login or registration.
     * @param courseId Course ID which user is going to rate.
     * @param rating Rating that user is going to leave.
     *
     * @throws IllegalParameterException Thrown when trying to rate not approved course.
     * @throws UnpaidCourseException  Thrown when trying to rate not purchased course.
     */
    public void addRating(String token, int courseId, int rating)
            throws IllegalParameterException, UnpaidCourseException {
        int userId = userDao.getUserId(token);

        if (courseDao.getCourseStatus(courseId) != Status.APPROVED.getStatusId())
            throw new IllegalParameterException();

        if (!studentDao.isPaid(token, courseId))
            throw new UnpaidCourseException();

        studentDao.addRating(userId, courseId, rating);
    }

    /**
     * Provides course purchase functionality. Adds information to DataBase about payment.
     *
     * @param token Security token. Autogenerated after login or registration.
     * @param courseId Course Id which user is going to buy.
     *
     * @throws IllegalParameterException Thrown when trying to buy not approved course.
     * @throws DuplicateRowException Thrown when trying to buy already bought course.
     */
    public void buyCourse(String token, int courseId) throws IllegalParameterException, DuplicateRowException {
        int studentId = userDao.getUserId(token);

        if (courseDao.getCourseStatus(courseId) != Status.APPROVED.getStatusId())
            throw new IllegalParameterException();

        if (studentDao.isPaid(token, courseId))
            throw new DuplicateRowException();

        studentDao.buyCourse(studentId, courseId);
    }

    /**
     * Public method. Gets already approved course's all sections.
     *
     * @param courseId Course ID which sections method will return.
     *
     * @return {@link List<Section>} which belong to course, specified by courseId argument.
     *
     * @throws IllegalParameterException Thrown when trying to access not approved course's sections.
     */
    public List<Section> getSections(int courseId) throws IllegalParameterException {

        if (courseDao.getCourseStatus(courseId) != Status.APPROVED.getStatusId())
            throw new IllegalParameterException();

        List<SectionEntity> list = fileInfoDao.getSections(courseId);

        if (list.isEmpty())
            return null;

        return list.stream()
                .map(e -> new Section(e.getId(), e.getName()))
                .collect(Collectors.toList());
    }


    /**
     * Public method. Gets all files' information from DataBase belonging to given by sectionId section.
     *
     * @param sectionId Section Id which items' information is needed.
     *
     * @return {@link List<FileItem>} which contains information about specified section's files.
     *
     * @throws IllegalParameterException Chained up from {@link CourseDao#}
     * @throws CourseAccessDeniedException Thrown when trying to access not approved courses items.
     */
    public List<FileItem> getSectionItems(int sectionId) throws IllegalParameterException, CourseAccessDeniedException {

        int courseId = courseDao.getCourseId(sectionId);

        if (courseDao.getCourseStatus(courseId) != Status.APPROVED.getStatusId())
            throw new CourseAccessDeniedException();

        List<FileItemEntity> entities = fileInfoDao.getSectionItems(sectionId);

        if (entities.isEmpty())
            return null;

        return entities.stream()
                .map(e -> new FileItem(e.getId(), e.getName(), e.isPublic()))
                .collect(Collectors.toList());
    }

    /**
     * Gets student's (given by security token) review(comment and rate) about course, identified by courseId.
     *
     * @param token Security token. Autogenerated after login or registration.
     * @param courseId Course Id, which review is needed.
     *
     * @return {@link Review} DTO object which contains student's review(comment and rate) information about course.
     *
     * @throws IllegalParameterException Thrown when trying to access not approved course's information.
     * @throws UnpaidCourseException Thrown when trying to access not purchased course's information.
     */
    public Review showStudentReview(String token, int courseId) throws IllegalParameterException, UnpaidCourseException {

        if (courseDao.getCourseStatus(courseId) != Status.APPROVED.getStatusId())
            throw new IllegalParameterException();

        if (!studentDao.isPaid(token, courseId))
            throw new UnpaidCourseException();

        ReviewEntity entity = studentDao.showStudentReview(token, courseId);

        return new Review(entity.getRating(), entity.getReview());

    }

    /**
     * Generates and returns file's full and direct path that belongs to specific user, identified by security token.
     *
     * @param token Security token. Autogenerated after login or registration.
     * @param itemId File's id, which path is required.
     *
     * @return {@link String} Required file's path.
     *
     * @throws IllegalParameterException Chained up from {@link CourseDao#getCourseIdByItem(int)}.
     * @throws CourseAccessDeniedException Thrown when trying to access not approved course's files.
     */
    public String getFilePath(String token, int itemId)
            throws IllegalParameterException, CourseAccessDeniedException {

        int courseId = courseDao.getCourseIdByItem(itemId);
        String path;
        if (courseDao.getCourseStatus(courseId) != Status.APPROVED.getStatusId()) {
            throw new CourseAccessDeniedException();
        }

        path = DirectoryHandler.root + File.separator + courseDao.getFilePath(itemId, courseId);

        if (courseDao.isPublicItem(itemId) || studentDao.isPaid(token, courseId))
            return path;

        throw new CourseAccessDeniedException();
    }
}
